import java.io.BufferedWriter; 
import java.io.File; 
import java.io.FileWriter; 
import java.io.IOException; 
import java.util.Date; 
import com.dropbox.core.DbxRequestConfig; 
import com.dropbox.core.android.Auth; 
import com.dropbox.core.DbxException; 
import com.dropbox.core.DbxRequestConfig; 
import com.dropbox.core.v2.DbxClientV2; 
import com.dropbox.core.v2.files.FileMetadata; 
import com.dropbox.core.v2.files.UploadErrorException; 
import com.dropbox.core.v2.files.WriteMode; 
 
// Authenticate the user with Dropbox 
public void authenticateWithDropbox() { 
    DbxRequestConfig config = 
DbxRequestConfig.newBuilder("YOUR_APP_NAME").build(); 
    Auth.startOAuth2Authentication(context, "YOUR_DROPBOX_APP_KEY"); 
}
// Handle authentication result in onActivityResult 
@Override 
protected void onActivityResult(int requestCode, int resultCode, @Nullable 
Intent data) { 
    super.onActivityResult(requestCode, resultCode, data); 
 
    if (requestCode == AuthActivity.REQUEST_AUTH && resultCode == 
RESULT_OK) { 
        // Authentication successful 
        String accessToken = Auth.getOAuth2Token(); 
        // Save the access token for future use 
    } else { 
        // Authentication failed or was cancelled 
    } 
} 
// Log user activities to a file 
public void logUserActivity(String activity) { 
    File logFile = new File(getFilesDir(), "user_activities.txt"); 
 
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(logFile,true))) { 
        String logEntry = "[" + new Date() + "] " + activity + "\n"; 
        writer.append(logEntry); 
    } catch (IOException e) { 
        e.printStackTrace(); 
    } 
} 
// Sync the log file to Dropbox 
public void syncLogFileToDropbox(String accessToken) { 
    File logFile = new File(getFilesDir(), "user_activities.txt"); 
 
    try { 
        DbxRequestConfig config = 
DbxRequestConfig.newBuilder("YOUR_APP_NAME").build(); 
        DbxClientV2 client = new DbxClientV2(config, accessToken); 
 
        try (InputStream inputStream = new FileInputStream(logFile)) { 
            FileMetadata metadata = 
client.files().uploadBuilder("/user_activities.txt") 
                    .withMode(WriteMode.OVERWRITE) 
                    .uploadAndFinish(inputStream); // File uploaded successfully 
        } catch (IOException | UploadErrorException | DbxException e) { 
            e.printStackTrace(); 
            // Handle upload error 
        } 
    } catch (Exception e) { 
        e.printStackTrace(); 
        // Handle client creation error 
    } 
}